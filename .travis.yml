language: cpp

git:
  clone: true
  submodules: true
  depth: 1
  quiet: false

env:
  global:
    - SOURCE_DIR=$TRAVIS_BUILD_DIR
    - BUILD_DIR=$TRAVIS_BUILD_DIR/build
    - RUN_DIR=$TRAVIS_BUILD_DIR/run
#   - CTEST_EXTRA_FLAGS="${CTEST_EXTRA_FLAGS:--VV}"

matrix:
  include:

    # - name: "Ubuntu 18.04 - UnixODBC - GCC - Debug"
    #   os: linux
    #   dist: bionic
    #   compiler: gcc
    #   env:
    #     - CC=gcc
    #     - CXX=g++
    #     - ODBC_DRIVER_MANAGER=unixodbc
    #     - BUILD_TYPE=Debug
    #     - EXTERNAL_THIRD_PARTY=no
    #     - PACKAGING=yes
    #     - TESTING=yes
    #     - STANDALONE_TESTS_ONLY=no
    #     - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
    #   services:
    #     - docker
    #   addons:
    #     apt:
    #       packages:
    #         - gcc
    #         - g++
    #         - unixodbc
    #         - unixodbc-bin
    #         - unixodbc-dev

    # - name: "Ubuntu 18.04 - UnixODBC - GCC - RelWithDebInfo"
    #   os: linux
    #   dist: bionic
    #   compiler: gcc
    #   env:
    #     - CC=gcc
    #     - CXX=g++
    #     - ODBC_DRIVER_MANAGER=unixodbc
    #     - BUILD_TYPE=RelWithDebInfo
    #     - EXTERNAL_THIRD_PARTY=no
    #     - PACKAGING=yes
    #     - TESTING=yes
    #     - STANDALONE_TESTS_ONLY=no
    #     - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
    #   services:
    #     - docker
    #   addons:
    #     apt:
    #       packages:
    #         - gcc
    #         - g++
    #         - unixodbc
    #         - unixodbc-bin
    #         - unixodbc-dev

    # - name: "Ubuntu 18.04 - UnixODBC - GCC - Release"
    #   os: linux
    #   dist: bionic
    #   compiler: gcc
    #   env:
    #     - CC=gcc
    #     - CXX=g++
    #     - ODBC_DRIVER_MANAGER=unixodbc
    #     - BUILD_TYPE=Release
    #     - EXTERNAL_THIRD_PARTY=no
    #     - PACKAGING=yes
    #     - TESTING=yes
    #     - STANDALONE_TESTS_ONLY=no
    #     - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
    #   services:
    #     - docker
    #   addons:
    #     apt:
    #       packages:
    #         - gcc
    #         - g++
    #         - unixodbc
    #         - unixodbc-bin
    #         - unixodbc-dev

    # # - name: "Ubuntu 18.04 - iODBC - GCC - RelWithDebInfo"
    # #   os: linux
    # #   dist: bionic
    # #   compiler: gcc
    # #   env:
    # #     - CC=gcc
    # #     - CXX=g++
    # #     - ODBC_DRIVER_MANAGER=iodbc
    # #     - BUILD_TYPE=RelWithDebInfo
    # #     - EXTERNAL_THIRD_PARTY=no
    # #     - PACKAGING=yes
    # #     - TESTING=yes
    # #     - STANDALONE_TESTS_ONLY=no
    # #     - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
    # #   services:
    # #     - docker
    # #   addons:
    # #     apt:
    # #       packages:
    # #         - gcc
    # #         - g++
    # #         - iodbc
    # #         - libiodbc2
    # #         - libiodbc2-dev

    # - name: "Ubuntu 18.04 - UnixODBC - Clang - RelWithDebInfo"
    #   os: linux
    #   dist: bionic
    #   compiler: clang
    #   env:
    #     - CC=clang
    #     - CXX=clang++
    #     - ODBC_DRIVER_MANAGER=unixodbc
    #     - BUILD_TYPE=RelWithDebInfo
    #     - EXTERNAL_THIRD_PARTY=no
    #     - PACKAGING=yes
    #     - TESTING=yes
    #     - STANDALONE_TESTS_ONLY=no
    #     - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
    #   services:
    #     - docker
    #   addons:
    #     apt:
    #       packages:
    #         - clang
    #         - unixodbc
    #         - unixodbc-bin
    #         - unixodbc-dev

    # # - name: "Ubuntu 18.04 - iODBC - Clang - RelWithDebInfo"
    # #   os: linux
    # #   dist: bionic
    # #   compiler: clang
    # #   env:
    # #     - CC=clang
    # #     - CXX=clang++
    # #     - ODBC_DRIVER_MANAGER=iodbc
    # #     - BUILD_TYPE=RelWithDebInfo
    # #     - EXTERNAL_THIRD_PARTY=no
    # #     - PACKAGING=yes
    # #     - TESTING=yes
    # #     - STANDALONE_TESTS_ONLY=no
    # #     - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
    # #   services:
    # #     - docker
    # #   addons:
    # #     apt:
    # #       packages:
    # #         - clang
    # #         - iodbc
    # #         - libiodbc2
    # #         - libiodbc2-dev

    # - name: "Ubuntu 18.04 - UnixODBC - GCC 8 - RelWithDebInfo"
    #   os: linux
    #   dist: bionic
    #   compiler: gcc
    #   env:
    #     - CC=gcc-8
    #     - CXX=g++-8
    #     - ODBC_DRIVER_MANAGER=unixodbc
    #     - BUILD_TYPE=RelWithDebInfo
    #     - EXTERNAL_THIRD_PARTY=no
    #     - PACKAGING=yes
    #     - TESTING=yes
    #     - STANDALONE_TESTS_ONLY=no
    #     - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
    #   services:
    #     - docker
    #   addons:
    #     apt:
    #       packages:
    #         - gcc-8
    #         - g++-8
    #         - unixodbc
    #         - unixodbc-bin
    #         - unixodbc-dev

    # # - name: "Ubuntu 18.04 - iODBC - GCC 8 - RelWithDebInfo"
    # #   os: linux
    # #   dist: bionic
    # #   compiler: gcc
    # #   env:
    # #     - CC=gcc-8
    # #     - CXX=g++-8
    # #     - ODBC_DRIVER_MANAGER=iodbc
    # #     - BUILD_TYPE=RelWithDebInfo
    # #     - EXTERNAL_THIRD_PARTY=no
    # #     - PACKAGING=yes
    # #     - TESTING=yes
    # #     - STANDALONE_TESTS_ONLY=no
    # #     - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
    # #   services:
    # #     - docker
    # #   addons:
    # #     apt:
    # #       packages:
    # #         - gcc-8
    # #         - g++-8
    # #         - iodbc
    # #         - libiodbc2
    # #         - libiodbc2-dev

    # # - name: "Ubuntu 18.04 - UnixODBC - GCC - RelWithDebInfo - System third-party libs"
    # #   os: linux
    # #   dist: bionic
    # #   compiler: gcc
    # #   env:
    # #     - CC=gcc
    # #     - CXX=g++
    # #     - ODBC_DRIVER_MANAGER=unixodbc
    # #     - BUILD_TYPE=RelWithDebInfo
    # #     - EXTERNAL_THIRD_PARTY=yes
    # #     - PACKAGING=yes
    # #     - TESTING=yes
    # #     - STANDALONE_TESTS_ONLY=no
    # #     - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
    # #   services:
    # #     - docker
    # #   addons:
    # #     apt:
    # #       packages:
    # #         - gcc
    # #         - g++
    # #         - openssl
    # #         - libssl-dev
    # #         - libpoco-dev
    # #         - googletest
    # #         - unixodbc
    # #         - unixodbc-bin
    # #         - unixodbc-dev

    - name: "Windows - MDAC - MSVC (Visual Studio 2017) - x64 - Debug"
      os: windows
      language: bash
      env:
        - BUILD_TYPE=Debug
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=yes
        - 'CMAKE_BUILD_EXTRA_FLAGS="-A x64 $CMAKE_BUILD_EXTRA_FLAGS"'

    # - name: "macOS 10.14 - iODBC - AppleClang (Xcode 11.2) - RelWithDebInfo"
    #   os: osx
    #   osx_image: xcode11.2
    #   compiler: clang
    #   env:
    #     - ODBC_DRIVER_MANAGER=iodbc
    #     - BUILD_TYPE=RelWithDebInfo
    #     - EXTERNAL_THIRD_PARTY=no
    #     - PACKAGING=yes
    #     - TESTING=yes
    #     - STANDALONE_TESTS_ONLY=no
    #   addons:
    #     homebrew:
    #       packages:
    #         - libiodbc

    # - name: "macOS 10.14 - UnixODBC - AppleClang (Xcode 11.2) - RelWithDebInfo"
    #   os: osx
    #   osx_image: xcode11.2
    #   compiler: clang
    #   env:
    #     - ODBC_DRIVER_MANAGER=unixodbc
    #     - BUILD_TYPE=RelWithDebInfo
    #     - EXTERNAL_THIRD_PARTY=no
    #     - PACKAGING=yes
    #     - TESTING=yes
    #     - STANDALONE_TESTS_ONLY=no
    #   addons:
    #     homebrew:
    #       packages:
    #         - unixodbc

    # - name: "macOS 10.14 - iODBC - AppleClang (Xcode 11.2) - RelWithDebInfo - System third-party libs"
    #   os: osx
    #   osx_image: xcode11.2
    #   compiler: clang
    #   env:
    #     - ODBC_DRIVER_MANAGER=iodbc
    #     - BUILD_TYPE=RelWithDebInfo
    #     - EXTERNAL_THIRD_PARTY=yes
    #     - PACKAGING=yes
    #     - TESTING=yes
    #     - STANDALONE_TESTS_ONLY=no
    #   addons:
    #     homebrew:
    #       packages:
    #         - openssl
    #         - poco
    #         - gtest
    #         - libiodbc

before_install: |-
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    sudo apt-get update -q
  elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    brew update
  elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
#   choco upgrade
  fi

install: |-
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    sudo apt-get install -y build-essential cmake perl libdbi-perl libdbd-odbc-perl python python-pyodbc
  elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    brew install cmake perl python@2
    PERL_MM_USE_DEFAULT=1 cpan -T DBD::ODBC
    if [[ "$ODBC_DRIVER_MANAGER" == "iodbc" ]]; then
      # It looks like older version of pyodbc works with iodbc out of the box on macOS:
      # https://github.com/mkleehammer/pyodbc/commit/aa178bfd25afd6fb90c77d054c1bcf0a6aa54411
      pip install --user pyodbc==3.0.7
    else
      pip install --user pyodbc
    fi
  elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
    choco install windows-sdk-10-version-1809-all wixtoolset
  fi

.clickhouse_start: &clickhouse_start |-
  if [[ "$TESTING" == "yes" ]] && [[ "$STANDALONE_TESTS_ONLY" != "yes" ]]; then
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      docker pull ${CLICKHOUSE_SERVER_IMAGE}
      CLICKHOUSE_SERVER_CONTAINER=$(docker run -d ${CLICKHOUSE_SERVER_IMAGE})
      CLICKHOUSE_SERVER_IP=$(docker inspect -f '{{ .NetworkSettings.IPAddress }}' ${CLICKHOUSE_SERVER_CONTAINER})
      docker ps -a
      docker stats -a --no-stream
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      # In macOS, ClickHouse is installed and running as a separate process on this same system.
      # TODO: use native package manager when available.
      $SOURCE_DIR/test/deploy_and_run_clickhouse_macos.sh
      CLICKHOUSE_SERVER_IP=localhost
    fi
  fi

.odbc_configure: &odbc_configure |-
  if [[ "$TESTING" == "yes" ]] && [[ "$STANDALONE_TESTS_ONLY" != "yes" ]]; then
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then

      # TODO

    else
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        ODBC_DRIVER_PATH=$BUILD_DIR/driver/libclickhouseodbc.so
        ODBC_DRIVERW_PATH=$BUILD_DIR/driver/libclickhouseodbcw.so
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        ODBC_DRIVER_PATH=$BUILD_DIR/driver/libclickhouseodbc.dylib
        ODBC_DRIVERW_PATH=$BUILD_DIR/driver/libclickhouseodbcw.dylib
      fi

      export ODBCSYSINI=$RUN_DIR
      export ODBCINSTINI=.odbcinst.ini
      export ODBCINI=$ODBCSYSINI/.odbc.ini
      if [[ "$ODBC_DRIVER_MANAGER" == "iodbc" ]]; then
        # Full path to a custom odbcinst.ini in ODBCINSTINI for iODBC.
        export ODBCINSTINI=$ODBCSYSINI/$ODBCINSTINI
      fi

      cat > $ODBCSYSINI/.odbcinst.ini <<-EOF
  [ODBC]
  Trace     = yes
  TraceFile = ${RUN_DIR}/odbc-driver-manager-trace.log

  [ODBC Drivers]
  clickhouse_driver   = Installed
  clickhouse_driver_w = Installed

  [clickhouse_driver]
  Driver     = ${ODBC_DRIVER_PATH}
  Setup      = ${ODBC_DRIVER_PATH}
  UsageCount = 1

  [clickhouse_driver_w]
  Driver     = ${ODBC_DRIVERW_PATH}
  Setup      = ${ODBC_DRIVERW_PATH}
  UsageCount = 1
  EOF

      cat > $ODBCSYSINI/.odbc.ini <<-EOF
  [ODBC]
  Trace     = yes
  TraceFile = ${RUN_DIR}/odbc-driver-manager-trace.log

  [ODBC Data Sources]
  clickhouse_localhost   = clickhouse_driver
  clickhouse_localhost_w = clickhouse_driver_w

  [clickhouse_localhost]
  Driver        = clickhouse_driver
  Description   = ClickHouse DSN (ANSI, localhost)
  Url           = http://${CLICKHOUSE_SERVER_IP}
  Timeout       = 30
  DriverLog     = yes
  DriverLogFile = ${RUN_DIR}/clickhouse-odbc-driver.log

  [clickhouse_localhost_w]
  Driver        = clickhouse_driver_w
  Description   = ClickHouse DSN (Unicode, localhost)
  Url           = http://${CLICKHOUSE_SERVER_IP}
  Timeout       = 30
  DriverLog     = yes
  DriverLogFile = ${RUN_DIR}/clickhouse-odbc-driver-w.log
  EOF
    fi
  fi

.configure: &configure |-
  CMAKE_CONFIGURE_FLAGS="-DTEST_DSN=clickhouse_localhost -DTEST_DSN_W=clickhouse_localhost_w $CMAKE_CONFIGURE_EXTRA_FLAGS"
  if [[ "$EXTERNAL_THIRD_PARTY" == "yes" ]]; then
    CMAKE_CONFIGURE_FLAGS="-DUNBUNDLED=1 $CMAKE_CONFIGURE_FLAGS"
  fi
  if [[ "$ODBC_DRIVER_MANAGER" == "unixodbc" ]]; then
    CMAKE_CONFIGURE_FLAGS="-DFIND_UNIXODBC_FIRST=1 $CMAKE_CONFIGURE_FLAGS"
  elif [[ "$ODBC_DRIVER_MANAGER" == "iodbc" ]]; then
    CMAKE_CONFIGURE_FLAGS="-DFIND_IODBC_FIRST=1 $CMAKE_CONFIGURE_FLAGS"
  fi
  cd $BUILD_DIR
  cmake $CMAKE_CONFIGURE_FLAGS $SOURCE_DIR

.build: &build |-
  CMAKE_BUILD_FLAGS="--config $BUILD_TYPE $CMAKE_BUILD_EXTRA_FLAGS -- $CMAKE_BUILD_NATIVE_EXTRA_FLAGS"
  cd $BUILD_DIR
  cmake --build . $CMAKE_BUILD_FLAGS

.pack: &pack |-
  if [[ "$PACKAGING" == "yes" ]]; then
    CPACK_FLAGS="-C $BUILD_TYPE $CPACK_EXTRA_FLAGS"
    cd $BUILD_DIR
    cpack $CPACK_FLAGS
  fi

.test: &test |-
  if [[ "$TESTING" == "yes" ]]; then
    CTEST_FLAGS="-C $BUILD_TYPE $CTEST_EXTRA_FLAGS"
    if [[ "$STANDALONE_TESTS_ONLY" == "yes" ]]; then
      CTEST_FLAGS="-R '.*-ut.*' $CTEST_FLAGS"
    fi
    cd $BUILD_DIR
    ctest $CTEST_FLAGS
  fi

before_script: |-
  mkdir -p $BUILD_DIR
  mkdir -p $RUN_DIR

script:
  - *clickhouse_start
  - *odbc_configure
  - *configure
  - *build
  - *pack
  - *test
